import { type Signal } from "solid-js";
import { type ReconcileOptions } from "solid-js/store";
type CacheEntry = [number, any, string, Set<Signal<number>>];
export declare function revalidate(key?: string | string[] | void, force?: boolean): Promise<void>;
export declare function cacheKeyOp(key: string | string[] | void, fn: (cacheEntry: CacheEntry) => void): void;
export type CachedFunction<T extends (...args: any) => U | Response, U> = T & {
    keyFor: (...args: Parameters<T>) => string;
    key: string;
};
export declare function cache<T extends (...args: any) => U | Response, U>(fn: T, name: string, options?: ReconcileOptions): CachedFunction<T, U>;
export declare namespace cache {
    var set: (key: string, value: any) => void;
}
export declare function hashKey<T extends Array<any>>(args: T): string;
export {};
