import { createSignal, getOwner, onCleanup, sharedConfig, startTransition } from "solid-js";
import { createStore, reconcile } from "solid-js/store";
import { getRequestEvent, isServer } from "solid-js/web";
import { useNavigate, getIntent } from "../routing";
import { redirectStatusCodes } from "../utils";
const LocationHeader = "Location";
const PRELOAD_TIMEOUT = 5000;
const CACHE_TIMEOUT = 180000;
let cacheMap = new Map();
// cleanup forward/back cache
if (!isServer) {
    setInterval(() => {
        const now = Date.now();
        for (let [k, v] of cacheMap.entries()) {
            if (!v[3].size && now - v[0] > CACHE_TIMEOUT) {
                cacheMap.delete(k);
            }
        }
    }, 300000);
}
function getCache() {
    if (!isServer)
        return cacheMap;
    const req = getRequestEvent() || sharedConfig.context;
    if (!req)
        throw new Error("Cannot find cache context");
    return req.routerCache || (req.routerCache = new Map());
}
export function revalidate(key, force = true) {
    return startTransition(() => {
        const now = Date.now();
        cacheKeyOp(key, entry => {
            force && (entry[0] = 0); //force cache miss
            revalidateSignals(entry[3], now); // retrigger live signals
        });
    });
}
export function cacheKeyOp(key, fn) {
    key && !Array.isArray(key) && (key = [key]);
    for (let k of cacheMap.keys()) {
        if (key === undefined || matchKey(k, key))
            fn(cacheMap.get(k));
    }
}
function revalidateSignals(set, time) {
    for (let s of set)
        s[1](time);
}
export function cache(fn, name, options) {
    const [store, setStore] = createStore({});
    const cachedFn = ((...args) => {
        const cache = getCache();
        const intent = getIntent();
        const owner = getOwner();
        const navigate = owner ? useNavigate() : undefined;
        const now = Date.now();
        const key = name + hashKey(args);
        let cached = cache.get(key);
        let version;
        if (owner) {
            version = createSignal(now, {
                equals: (p, v) => v - p < 50 // margin of error
            });
            onCleanup(() => cached[3].delete(version));
            version[0](); // track it;
        }
        if (cached && (isServer || intent === "native" || Date.now() - cached[0] < PRELOAD_TIMEOUT)) {
            version && cached[3].add(version);
            if (cached[2] === "preload" && intent !== "preload") {
                cached[0] = now;
            }
            let res = cached[1];
            if (!isServer && intent === "navigate") {
                res =
                    "then" in cached[1]
                        ? cached[1].then(handleResponse(false), handleResponse(true))
                        : handleResponse(false)(cached[1]);
                startTransition(() => revalidateSignals(cached[3], cached[0])); // update version
            }
            return res;
        }
        let res = !isServer && sharedConfig.context && sharedConfig.load
            ? sharedConfig.load(key) // hydrating
            : fn(...args);
        // serialize on server
        if (isServer && sharedConfig.context && !sharedConfig.context.noHydrate) {
            const e = getRequestEvent();
            (!e || !e.serverOnly) && sharedConfig.context.serialize(key, res);
        }
        if (cached) {
            cached[0] = now;
            cached[1] = res;
            cached[2] = intent;
            version && cached[3].add(version);
            if (!isServer && intent === "navigate") {
                startTransition(() => revalidateSignals(cached[3], cached[0])); // update version
            }
        }
        else
            cache.set(key, (cached = [now, res, intent, new Set(version ? [version] : [])]));
        if (intent !== "preload") {
            res =
                "then" in res
                    ? res.then(handleResponse(false), handleResponse(true))
                    : handleResponse(false)(res);
        }
        return res;
        function handleResponse(error) {
            return (v) => {
                if (v instanceof Response && redirectStatusCodes.has(v.status)) {
                    if (navigate) {
                        startTransition(() => {
                            let url = v.headers.get(LocationHeader);
                            if (url && url.startsWith("/")) {
                                navigate(url, {
                                    replace: true
                                });
                            }
                            else if (!isServer && url) {
                                window.location.href = url;
                            }
                        });
                    }
                    return;
                }
                if (error)
                    throw error;
                if (isServer)
                    return v;
                setStore(key, reconcile(v, options));
                return store[key];
            };
        }
    });
    cachedFn.keyFor = (...args) => name + hashKey(args);
    cachedFn.key = name;
    return cachedFn;
}
cache.set = (key, value) => {
    const cache = getCache();
    const now = Date.now();
    let cached = cache.get(key);
    let version;
    if (getOwner()) {
        version = createSignal(now, {
            equals: (p, v) => v - p < 50 // margin of error
        });
        onCleanup(() => cached[3].delete(version));
    }
    if (cached) {
        cached[0] = now;
        cached[1] = value;
        cached[2] = "preload";
        version && cached[3].add(version);
    }
    else
        cache.set(key, (cached = [now, value, , new Set(version ? [version] : [])]));
};
function matchKey(key, keys) {
    for (let k of keys) {
        if (key.startsWith(k))
            return true;
    }
    return false;
}
// Modified from the amazing Tanstack Query library (MIT)
// https://github.com/TanStack/query/blob/main/packages/query-core/src/utils.ts#L168
export function hashKey(args) {
    return JSON.stringify(args, (_, val) => isPlainObject(val)
        ? Object.keys(val)
            .sort()
            .reduce((result, key) => {
            result[key] = val[key];
            return result;
        }, {})
        : val);
}
function isPlainObject(obj) {
    let proto;
    return (obj != null &&
        typeof obj === "object" &&
        (!(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype));
}
